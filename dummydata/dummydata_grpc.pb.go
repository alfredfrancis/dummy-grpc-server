// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dummydata.proto

package dummydata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DummyDataService_GetDummyData_FullMethodName    = "/dummydata.DummyDataService/GetDummyData"
	DummyDataService_StreamDummyData_FullMethodName = "/dummydata.DummyDataService/StreamDummyData"
)

// DummyDataServiceClient is the client API for DummyDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type DummyDataServiceClient interface {
	// Get dummy data with authentication
	GetDummyData(ctx context.Context, in *DummyDataRequest, opts ...grpc.CallOption) (*DummyDataResponse, error)
	// Stream dummy data with authentication
	StreamDummyData(ctx context.Context, in *DummyDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DummyDataResponse], error)
}

type dummyDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyDataServiceClient(cc grpc.ClientConnInterface) DummyDataServiceClient {
	return &dummyDataServiceClient{cc}
}

func (c *dummyDataServiceClient) GetDummyData(ctx context.Context, in *DummyDataRequest, opts ...grpc.CallOption) (*DummyDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DummyDataResponse)
	err := c.cc.Invoke(ctx, DummyDataService_GetDummyData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyDataServiceClient) StreamDummyData(ctx context.Context, in *DummyDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DummyDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DummyDataService_ServiceDesc.Streams[0], DummyDataService_StreamDummyData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DummyDataRequest, DummyDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyDataService_StreamDummyDataClient = grpc.ServerStreamingClient[DummyDataResponse]

// DummyDataServiceServer is the server API for DummyDataService service.
// All implementations must embed UnimplementedDummyDataServiceServer
// for forward compatibility.
//
// Service definition
type DummyDataServiceServer interface {
	// Get dummy data with authentication
	GetDummyData(context.Context, *DummyDataRequest) (*DummyDataResponse, error)
	// Stream dummy data with authentication
	StreamDummyData(*DummyDataRequest, grpc.ServerStreamingServer[DummyDataResponse]) error
	mustEmbedUnimplementedDummyDataServiceServer()
}

// UnimplementedDummyDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDummyDataServiceServer struct{}

func (UnimplementedDummyDataServiceServer) GetDummyData(context.Context, *DummyDataRequest) (*DummyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDummyData not implemented")
}
func (UnimplementedDummyDataServiceServer) StreamDummyData(*DummyDataRequest, grpc.ServerStreamingServer[DummyDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDummyData not implemented")
}
func (UnimplementedDummyDataServiceServer) mustEmbedUnimplementedDummyDataServiceServer() {}
func (UnimplementedDummyDataServiceServer) testEmbeddedByValue()                          {}

// UnsafeDummyDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyDataServiceServer will
// result in compilation errors.
type UnsafeDummyDataServiceServer interface {
	mustEmbedUnimplementedDummyDataServiceServer()
}

func RegisterDummyDataServiceServer(s grpc.ServiceRegistrar, srv DummyDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDummyDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DummyDataService_ServiceDesc, srv)
}

func _DummyDataService_GetDummyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyDataServiceServer).GetDummyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DummyDataService_GetDummyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyDataServiceServer).GetDummyData(ctx, req.(*DummyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DummyDataService_StreamDummyData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DummyDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DummyDataServiceServer).StreamDummyData(m, &grpc.GenericServerStream[DummyDataRequest, DummyDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DummyDataService_StreamDummyDataServer = grpc.ServerStreamingServer[DummyDataResponse]

// DummyDataService_ServiceDesc is the grpc.ServiceDesc for DummyDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DummyDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dummydata.DummyDataService",
	HandlerType: (*DummyDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDummyData",
			Handler:    _DummyDataService_GetDummyData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDummyData",
			Handler:       _DummyDataService_StreamDummyData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dummydata.proto",
}
